#!/usr/bin/env python3
# encoding=UTF-8

# Copyright © 2022 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import re
import sys
import traceback

import gi

gi.require_version('GLib', '2.0')
from gi.repository import GLib

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

gi.require_version('Gdk', '3.0')
from gi.repository import Gdk

gi.require_version('Vte', '2.91')
from gi.repository import Vte

prog = argparse.ArgumentParser().prog

class Window(Gtk.Window):

    def __init__(self):
        super().__init__(title=prog)
        hbox = Gtk.HBox()
        self.term = Terminal()
        self.term.drag_dest_add_text_targets()
        hbox.pack_start(self.term, True, True, 0)
        scrollbar = Gtk.VScrollbar()
        scrollbar.set_adjustment(self.term.get_vadjustment())
        hbox.pack_start(scrollbar, False, True, 0)
        self.add(hbox)
        self.connect('destroy', Gtk.main_quit)

def get_dl_dir():
    return GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DOWNLOAD)

def is_url(text):
    return re.match('^https?://', text) is not None

class Terminal(Vte.Terminal):

    def __init__(self):
        super().__init__()
        self.url = None
        self.drag_dest_set(Gtk.DestDefaults.ALL, [], Gdk.DragAction.COPY)
        self.connect('drag-data-received', self.on_drag_data_received)
        self.feed(b'[drag & drop URL here]\33[?25l')

    def on_drag_data_received(self, widget, drag_context, x, y, data, info, time):
        if self.url is not None:
            return
        text = data.get_text()
        if not is_url(text):
            return
        self.recv_url(text)

    def recv_url(self, url):
        self.url = url
        self.feed(b'\33[H\33[J\33[?25h')
        cmd = ['yt-dlp', '--', self.url]
        self.spawn_async(
            Vte.PtyFlags.DEFAULT,
            get_dl_dir(),
            cmd,
            None,
            GLib.SpawnFlags.DEFAULT,
            None, None, -1, None
        )

def excepthook(exctype, value, tb):
    sys.excepthook = sys.__excepthook__
    sys.excepthook(exctype, value, tb)
    tb_text = str.join('', traceback.format_exception(exctype, value, tb))
    dlg = Gtk.MessageDialog(
        modal=True,
        message_type=Gtk.MessageType.ERROR,
        buttons=Gtk.ButtonsType.CLOSE,
        title=f'{prog} — fatal error',
        text=tb_text,
    )
    dlg.run()
    Gtk.main_quit()

def main():
    sys.excepthook = excepthook
    window = Window()
    window.show_all()
    Gtk.main()

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
