#!/usr/bin/env python3
# encoding=UTF-8

# Copyright © 2022-2024 Jakub Wilk <jwilk@jwilk.net>
# SPDX-License-Identifier: MIT

import argparse
import html.parser
import re
import subprocess
import sys
import traceback

import gi

gi.require_version('GLib', '2.0')
from gi.repository import GLib

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

gi.require_version('Gdk', '3.0')
from gi.repository import Gdk

gi.require_version('Vte', '2.91')
from gi.repository import Vte

0_0  # Python >= 3.6 is required

prog = argparse.ArgumentParser().prog

class Window(Gtk.Window):

    def __init__(self):
        super().__init__(title=prog)
        hbox = Gtk.HBox()
        self.term = Terminal()
        self.term.drag_dest_add_text_targets()
        hbox.pack_start(self.term, expand=True, fill=True, padding=0)
        scrollbar = Gtk.VScrollbar()
        scrollbar.set_adjustment(self.term.get_vadjustment())
        hbox.pack_start(scrollbar, expand=False, fill=True, padding=0)
        self.add(hbox)
        accel = Gtk.AccelGroup()
        accel.connect(
            accel_key=Gdk.keyval_from_name('v'),
            accel_mods=Gdk.ModifierType.CONTROL_MASK,
            accel_flags=0,
            closure=self.term.on_accel
        )
        self.add_accel_group(accel)
        self.connect('destroy', Gtk.main_quit)

def get_dl_dir():
    return GLib.get_user_special_dir(GLib.UserDirectory.DIRECTORY_DOWNLOAD)

def get_urls(text):
    return re.findall(r'^https?://\S+', text, flags=re.M)

def deduplicate(lst):
    return list({elt: 0 for elt in lst}.keys())

class HTMLParser(html.parser.HTMLParser):

    def __init__(self):
        super().__init__()
        self.y_urls = []

    def handle_starttag(self, tag, attrs):
        url = dict(attrs).get('href', '')
        if re.fullmatch('https?://\S+', url):
            self.y_urls += [url]

    if sys.version_info < (3, 10):
        # https://bugs.python.org/issue31844
        def error(self, message):
            # hopefully not reachable
            raise RuntimeError(message)

def get_html_urls(data):
    if isinstance(data, bytes):
        # eww, FIXME
        data = data.decode('ASCII', 'replace')
    parser = HTMLParser()
    parser.feed(data)
    parser.close()
    return parser.y_urls

class Terminal(Vte.Terminal):

    prompt = (
        b'[drag & drop URL here; or paste URLs with Ctrl-V]'
        b'\33[?25l'  # hide cursor
    )

    def __init__(self):
        super().__init__()
        self.urls = None
        self.clipboard = Gtk.Clipboard.get(Gdk.SELECTION_CLIPBOARD)
        self.drag_dest_set(
            flags=Gtk.DestDefaults.ALL,
            targets=[],
            actions=Gdk.DragAction.COPY
        )
        self.connect('drag-data-received', self.on_drag_data_received)
        self.connect('child-exited', self.on_child_exited)
        self.feed(self.prompt)

    def on_accel(self, group, window, key, mod):
        if self.urls:
            return
        assert key == Gdk.keyval_from_name('v')
        assert mod == Gdk.ModifierType.CONTROL_MASK
        text = self.clipboard.wait_for_text() or ''
        urls = get_urls(text)
        a_text_html = Gdk.Atom.intern('text/html', False)
        selection = self.clipboard.wait_for_contents(a_text_html)
        html_content = selection.get_data()
        urls += get_html_urls(html_content)
        if not urls:
            return
        self.recv_urls(urls)

    def on_drag_data_received(self, widget, drag_context, x, y, data, info, time):
        if self.urls:
            return
        text = data.get_text()
        urls = get_urls(text)
        if not urls:
            return
        self.recv_urls(urls)

    def recv_urls(self, urls):
        urls = deduplicate(urls)
        self.urls = urls
        self.feed(
            b'\33[G'  # go to start of line
            b'\33[K'  # erase line
            b'\33[?25h'  # show cursor
        )
        cmd = ['yt-dlp', '--', *urls]
        self.spawn_async(
            Vte.PtyFlags.DEFAULT, # pty_flags
            get_dl_dir(), # working_directory
            cmd, # argv
            None, # envv
            GLib.SpawnFlags.DEFAULT, # spawn_flags
            None, # child_setup
            None, # child_setup_data
            -1, # timeout
        )

    def on_child_exited(self, widget, exit_status):
        self.feed(b'\r\n')
        self.feed(self.prompt)
        self.urls = None

def excepthook(exctype, value, tb):
    sys.excepthook = sys.__excepthook__
    sys.excepthook(exctype, value, tb)
    tb_text = str.join('', traceback.format_exception(exctype, value, tb))
    dlg = Gtk.MessageDialog(
        modal=True,
        message_type=Gtk.MessageType.ERROR,
        buttons=Gtk.ButtonsType.CLOSE,
        title=f'{prog} — fatal error',
        text=tb_text,
    )
    dlg.run()
    Gtk.main_quit()

def main():
    sys.excepthook = excepthook
    window = Window()
    window.show_all()
    Gtk.main()

if __name__ == '__main__':
    main()

# vim:ts=4 sts=4 sw=4 et
